name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: clone binutils
      run: git clone https://github.com/bminor/binutils-gdb.git --depth=1
    - name: clone gcc
      run: git clone https://github.com/gcc-mirror/gcc.git --depth=1
    - name: install gmp
      run: |
        cd ${{github.workspace}}/gcc
        ./contrib/download_prerequisites
        tar -xvf gmp-6.2.1.tar.bz2
        cd gmp-6.2.1
        ./configure --prefix=${{github.workspace}}/toolchains/gcc
        make -j
        make install -j
    - name: install mpfr
      run: |
        cd ${{github.workspace}}/gcc
        tar -xvf mpfr-4.1.0.tar.bz2
        cd mpfr-4.1.0
        ./configure --prefix=${{github.workspace}}/toolchains/gcc --with-gmp=${{github.workspace}}/toolchains/gcc
        make -j
        make install -j
    - name: install mpc
      run: |
        cd ${{github.workspace}}/gcc
        tar -xvf mpc-1.2.1.tar.gz
        cd mpc-1.2.1
        ./configure --prefix=${{github.workspace}}/toolchains/gcc --with-gmp=${{github.workspace}}/toolchains/gcc --with-mpfr=${{github.workspace}}/toolchains/gcc
        make -j
        make install -j
    - name: install isl
      run: |
        cd ${{github.workspace}}/gcc
        tar -xvf isl-0.24.tar.bz2
        cd isl-0.24 
        ./configure --prefix=${{github.workspace}}/toolchains/gcc --with-gmp=${{github.workspace}}/toolchains/gcc --with-mpc=${{github.workspace}}/toolchains/gcc --with-mpfr=${{github.workspace}}/toolchains/gcc
        make -j
        make install -j
    - name: configure binutils
      run: |
        cd ${{github.workspace}}/binutils-gdb
        mkdir -v build
        cd build
        ../configure --prefix=${{github.workspace}}/toolchains/gcc --disable-nls --disable-werror --with-gmp=${{github.workspace}}/toolchains/gcc --with-mpc=${{github.workspace}}/toolchains/gcc --with-mpfr=${{github.workspace}}/toolchains/gcc
        cd ${{github.workspace}} 
    - name: build binutils
      run: |
        cd ${{github.workspace}}/binutils-gdb/build
        make -j
        make install-strip -j
        cd ${{github.workspace}} 
    - name: configure && build gcc
      run: |
        cd ${{github.workspace}}/gcc
        mkdir -v build
        cd build
        ../configure --prefix=${{github.workspace}}/toolchains/gcc --disable-nls --disable-werror --disable-bootstrap --with-gmp=${{github.workspace}}/toolchains/gcc --with-mpc=${{github.workspace}}/toolchains/gcc --with-mpfr=${{github.workspace}}/toolchains/gcc --with-isl=${{github.workspace}}/toolchains/gcc --enable-languages=c,c++ --disable-multilib
        make -j
        make install-strip -j
        cd ${{github.workspace}} 
    - name: release gcc
      run: |
        mkdir -v release
        tar -czvf ./release/gcc-latest.tar.gz ${{github.workspace}}/toolchains/gcc
    - name: Simple Upload to Release
      # You may pin to the exact commit or the version.
      # uses: Guerra24/upload-to-release@933304c241627d9260fc449fa504becb04f365a3
      uses: Guerra24/upload-to-release@v1.0.0
      with:
        # Artifact name
        name: gcc-ubuntu-latest
        # Path to the file to upload
        path: ./release/gcc-latest.tar.gz
        # Content type for the file
        content-type: toolchains/gcc # optional, default is application/octet-stream
        # secrets.GITHUB_TOKEN
        repo-token: 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
    - name: clone fast_io
      run: git clone https://github.com/cppfastio/fast_io.git
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: Setup Ninja
        # You may pin to the exact commit or the version.
        # uses: ashutoshvarma/setup-ninja@93f8b9763516f1fb9b4d9840b12d844bee17791f
      uses: ashutoshvarma/setup-ninja@v1.1
      with:
        # Ninja version. Make sure given ninja version exists in ninja github release
        version: 1.11.0 # default is 1.10.0
        # Folder where ninja binary will be downloaded
        dest: ninja # optional, default is ninja_bin
        # Override default platform detection logic. Accepted values are [mac, linux, win]
        platform: linux # optional
    - name: Clean
      run: rm -rf build
    - name: ConfigureCMakeForClang
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    - name: Clang-Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Clang-Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Clean
      run: rm -rf build
    



