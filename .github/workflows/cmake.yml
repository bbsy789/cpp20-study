name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: clone binutils
      run: git clone https://github.com/bminor/binutils-gdb.git --depth=1
    - name: clone gcc
      run: git clone https://github.com/gcc-mirror/gcc.git --depth=1
    - name: configure&&build binutils
      run: cd binutils-gdb && mkdir -v build && cd build && ../configure --prefix=${{github.workspace}/toolchains/gcc} --disable-nls --disable-werror && make all-install -j && cd ${{github.worspace}}
    - name: configure&&build gcc
      run: cd gcc && mkdir -v build && cd build && ../configure --prefix=${{github.workspace}/toolchains/gcc} --disable-nls --disable-werror --disable-bootstrap --enable-languages=c,c++ --disable-multilib -build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu && make -j && make install -j && cd ${{github.worspace}} 
    - name: clone fast_io
      run: git clone https://github.com/cppfastio/fast_io.git
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: tar gcc
      run: tar cvf gcc.tar ${{github.workspace}/toolchains/gcc}
    - name: xz gcc
      run: xz -z gcc.tar
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: gcc # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: gcc.tar.xz
        # The desired behavior if no files are found using the provided path.
    - name: Setup Ninja
        # You may pin to the exact commit or the version.
        # uses: ashutoshvarma/setup-ninja@93f8b9763516f1fb9b4d9840b12d844bee17791f
      uses: ashutoshvarma/setup-ninja@v1.1
      with:
        # Ninja version. Make sure given ninja version exists in ninja github release
        version: 1.11.0 # default is 1.10.0
        # Folder where ninja binary will be downloaded
        dest: ninja # optional, default is ninja_bin
        # Override default platform detection logic. Accepted values are [mac, linux, win]
        platform: linux # optional
    - name: Clean
      run: rm -rf build
    - name: ConfigureCMakeForClang
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    - name: Clang-Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Clang-Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Clean
      run: rm -rf build
    



