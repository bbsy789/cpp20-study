name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Install Clang
      # You may pin to the exact commit or the version.
      # uses: egor-tensin/setup-clang@ef434b41eb33a70396fb336b1bae39c76d740c3d
      uses: egor-tensin/setup-clang@v1.4
    - name: Setup GCC
      # You may pin to the exact commit or the version.
      # uses: Dup4/actions-setup-gcc@3e3b2ff18c6df33588500e965fa0d2507aeb4429
      uses: Dup4/actions-setup-gcc@v1
      with:
        # GCC version to install
        version: lastest # optional, default is latest
        # Set up cc/gcc/c++/g++/gcov executables
        cc: true # optional, default is true
        # Set up CC/CXX/GCOV environment variables
        env: true # optional, default is true
    
    - name: clone fast_io
      run: git clone https://github.com/cppfastio/fast_io.git
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: Setup Ninja
        # You may pin to the exact commit or the version.
        # uses: ashutoshvarma/setup-ninja@93f8b9763516f1fb9b4d9840b12d844bee17791f
      uses: ashutoshvarma/setup-ninja@v1.1
      with:
        # Ninja version. Make sure given ninja version exists in ninja github release
        version: 1.11.0 # default is 1.10.0
        # Folder where ninja binary will be downloaded
        dest: ninja # optional, default is ninja_bin
        # Override default platform detection logic. Accepted values are [mac, linux, win]
        platform: linux # optional
    - name: ConfigureCMakeForGCC 
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    - name: GCC-Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: GCC-Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Clean
      run: rm -rf build
    - name: ConfigureCMakeForClang
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    - name: Clang-Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Clang-Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    - name: Clean
      run: rm -rf build
    



